<?xml version="1.0" encoding="UTF-8"?>
<!--
    JBoss, Home of Professional Open Source
    Copyright 2013, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<cheatsheet title="CDI + JSF + EJB + JTA + Bean Validation + JAX-RS + Arquillian: Cadastro de produtos">
  <intro>
    <description>
Este exemplo demonstra algumas features do Java EE 7, e pode servir como ponto de partida pra um projeto de software.
<br/><br/>
<b>Bean Validation 1.1</b>
<br/><br/>
        Bean Validation é uma especificação atualização para Java EE 7, inspirado pelo Hibernate Validator . Ele permite que os desenvolvedores de aplicativos para especificar restrições de uma vez ( muitas vezes no seu modelo de domínio ) , e aplicá-las em todas as camadas da aplicação , protegendo os dados e dar feedback útil para os usuários .
<br/><br/>
<b>JAX-RS: The Java API for RESTful Web Services</b>
<br/><br/>
 JAX-RS é uma especificação atualização para Java EE 7. Ele permite que os desenvolvedores de aplicativos para expor facilmente serviços Java como serviços Web RESTful.
</description>
</intro>
  <item
        skip="false"
        title="Exemplo de cadastro de produtos">
     <description>
         A aplicação mostra uma série de tecnologias Java EE, como CDI , JSF , EJB , JTA , JAX-RS e Arquillian .
         Ele faz isso fornecendo um banco de dados de registro de membro, disponível via JSF e JAX-RS
         <br/><br/>
         Como de costume , vamos & apos; s começar por olhar para os descritores de implementação necessárias .
         Até agora , nós estamos muito acostumados a ver <b> beans.xml </ b> e <b > faces -config.xml </ b> em <b > WEB- INF / </ b>
         ( que pode ser encontrado no <b> src / main / webapp </ b> diretório do exemplo).
         Observe que , mais uma vez , nós don & apos ; t precisa de um web.xml.
         Existem dois arquivos de configuração em <b > WEB -INF / classes / META -INF </ b>
         ( que pode ser encontrado no <b> src / main / resources </ b> diretório do exemplo) - <b> persistence.xml < / b> ,
         que estabelece JPA , e <b> Import.sql </ b> que Hibernate , o provedor de JPA em JBoss Application Server ,
         vai usar para carregar os usuários iniciais para o aplicativo quando o aplicativo é iniciado .
    </description>
    <command
    required="true"
    returns="currentProject"
    serialization="org.jboss.tools.project.examples.cheatsheet.getProjectForCheatsheet"/>
  </item>

   <item
         title="default.xhtml">
      <description>
          Em seguida, vamos & apos; s dê uma olhada nas JSF visualizar o usuário vê . foi usado um modelo para fornecer o conteúdo ao centro  e rodapé . Este vive em <b > WEB- INF / templates / default.xhtml </ b> :
      </description>
      <subitem
              label="Foi definida uma seção Head em comun,para utilização do css "
            skip="true">
        <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/WEB-INF/templates/default.xhtml,fromLine=22,toLine=26)"/>
    </subitem>
    <subitem
            label="A aplicação tem uma barra de tarefas."
            skip="true">
         <command
               required="false"
               serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/WEB-INF/templates/default.xhtml,fromLine=37,toLine=46)"/>
    </subitem>
    <subitem
            label="Rodapé em comun nas duas telas. "
            skip="true">
        <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/WEB-INF/templates/default.xhtml,fromLine=47,toLine=52)"/>
    </subitem>
    <subitem
            label="Conteúdo ao centro da tela. "
            skip="true">
        <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/WEB-INF/templates/default.xhtml,fromLine=32,toLine=36)"/>
       </subitem>

  </item>

  <item
      title="index.xhtml">
      <description>
      A página inicial, index.xhtml, é sobreposta pela página de consulta no momento em que o usuário inicía a aplicação:
      </description>
      <subitem
            label="O formulário lista os registros preeexistentes e permite abrir a interface de cadastro ou edição."
            skip="true">
        <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.xhtml,fromLine=33,toLine=62)"/>
    </subitem>
    <subitem
            label="A aplicação usa bean validator, para validar as entradas de dados do usuário."
            skip="true">
      </subitem>
      <subitem
            label="Name validation">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.xhtml,fromLine=39,toLine=40)"/>
    </subitem>
    <subitem
            label="Email validation"
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.xhtml,fromLine=43,toLine=44)"/>
    </subitem>
    <subitem
            label="Phone number validation"
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.xhtml,fromLine=47,toLine=49)"/>
    </subitem>
    <!--<subitem
            label="This application exposes REST endpoints for each registered member. The application helpfully displays the URL to the REST endpoint on this page. "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.xhtml,fromLine=86,toLine=90)"/>
    </subitem>
    -->

  </item>

  <item
        skip="true"
        title="Produto.java">
     <description>
       Em seguida veja a entidade e a forma como a aplicação interage entre as camadas, e interfaces
    </description>
    <subitem
            label="Como de costume com JPA , nós definimos que a classe é uma entidade adicionando Entity"
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Produto.java,fromLine=37)"/>
  </subitem>

  </item>

  <item
        skip="true"
        title="ProdutoRepository.java">
     <description>
       Classe responsável por realizar a interação com a camada de banco de dados.
    </description>
    <subitem
            label="Foi utilizado um ejb, para isso pois ja oferece controle de transações"
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/kitchensink/data/ProdutoRepository.java,fromLine=29)"/>
  </subitem>
  <subitem
            label="O EntityManager foi injetado para permitir o uso do JPA."
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/kitchensink/data/ProdutoRepository.java,fromLine=32)"/>
  </subitem>

  </item>







  <item
        skip="true"
        title="Compilar e publicar a aplicação">
     <description>
       Utilize o maven
    </description>
    <!-- the runOnServer command is not implemented yet
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.actions.runOnServer(project=${currentProject})"/>
  -->
  <action
    pluginId="org.jboss.tools.project.examples.cheatsheet"
    class="org.jboss.tools.project.examples.cheatsheet.actions.RunOnServer"
    param1="${currentProject}"/>
  </item>
  <item
        skip="true"
        title="Arquillian">
     <description>
       Utilização do Arquillian, um software que permite que ejbs sejam injetados em um contexto de testes, facilitando assim o teste da aplicação.
    <br/><br/>
         Arquillian fornece toda a a execução de seu teste dentro JBoss Application Server ,
         permitindo que você se concentrar em testar seu aplicativo .
         A fim de fazer isso , ele utiliza Shrinkwrap , uma API fluente para a definição de embalagem,
         para criar um arquivo de implantar.
         Vamos percorrer o testcase , e como você configurar Arquillian em apenas um momento ,
         mas primeiro vamos executar o teste.

    </description>
  </item>
  <item
        skip="true"
        title="Start Arquillian tests">
    <description>
        Arquillian define dois modos, gerenciados e remotos.
        O modo de gestão vai cuidar de iniciar e parar o servidor para você ,
        enquanto o modo remoto se conecta a um servidor já em execução.
      <br/>

  <action
      pluginId="org.jboss.tools.project.examples.cheatsheet"
      class="org.jboss.tools.project.examples.cheatsheet.actions.LaunchJUnitTest"
      param1="${currentProject}"
        param2="arq-wildfly-remote"/>
  </item>


</cheatsheet>
